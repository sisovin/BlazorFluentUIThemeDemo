@page "/weather"
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <FluentProgressRing Style="width:30px; height:30px;" />
}
else
{
    <FluentGrid Justify="JustifyContent.Center" Style="margin-top:20px; margin-bottom:20px;">
        <FluentGridItem Style="border:1px solid #ddd; border-radius:5px;" xs="12">
            <FluentDataGrid Id="weathergrid" Items=@forecasts GridTemplateColumns="1fr 1fr 1fr 2fr" TGridItem=WeatherForecast>
                <PropertyColumn Title="Date" Property="@(c => c!.Date)" Sortable="true" Align="@Align.Start" />
                    <TemplateColumn Title="Symbol" Align="@Align.Center">
                        <FluentPersona ImageSize="30px" Initials="@context!.Summary[0]!.ToString().ToUpper()" />
                    </TemplateColumn>
                <PropertyColumn Title="Temp. (C)" Property="@(c => c!.TemperatureC)" Sortable="true" Align="@Align.Center" />
                <PropertyColumn Title="Temp. (F)" Property="@(c => c!.TemperatureF)" Sortable="true" Align="@Align.Center" />
                <PropertyColumn Title="Summary" Property="@(c => c!.Summary)" Sortable="true" Align="@Align.Start" />
            </FluentDataGrid>
        </FluentGridItem>
    </FluentGrid>
}

@code {
    private IQueryable<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        DemoLogger.WriteLine("Weather page initialized");

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).AsQueryable();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
